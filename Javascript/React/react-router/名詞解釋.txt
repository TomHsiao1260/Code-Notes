Server-Side Rendering
----------------------------------------------------
後端把整 HTML 處理好之後，再傳給前端畫出來
若開啟一個新的網址，會讓前端拿到一個新的 HTML，會看到畫面刷新
若效能不好或 lag 會出現「白畫面」，使用者體驗不佳 (聽音樂、玩遊戲)

Client-Side Rendering
----------------------------------------------------
後端只把必要資料處理好之後傳給前端，再由前端處理產生 HTML 再畫出來
利用像是 VDOM 的技術，讓使用者點選一些連結的時候
前端網頁只是透過 API 向後端要資料，動態的更新那部份的頁面
有許多前端技術 (React Routing, GraphQL) 讓邏輯更乾淨、易模組化

SPA (Single Page Application)
----------------------------------------------------
client-side rendering 常常配合著所謂的 SPA 的實現方法
前端事實上只有一個 index.html，所以使用者在切換連結的時
只是發出 Ajax/JSON API request，從後端拿資料，但前端並沒切換頁面
所以可以做到一邊在網頁上看影片，一方面點選連結去查看作者資訊
而不會影響到影片的播放

Client-Side Routing
----------------------------------------------------
不過 SPA 的實作會讓回到上一頁的功能失效(因為都在同一個頁面)
這時候 Client-Side Routing 能在 local 端產生瀏覽器的 routing
在瀏覽到不同頁面的時候會有對應到不同的 routing (web address)
而被存到瀏覽器的 history 中，所以才能夠使用前/後一頁的功能
這就是 React Router 在做的事情，通過管理 URL
實現頁面以及狀態切換可以「模組化」