#############################################
###############    npm 使用    ###############
#############################################

----------------------------------------------
建立初始專案 (產生 package.json 檔)

npm init -y

----------------------------------------------
安裝套件 (產生 package-lock.json、node_modules)

npm install

----------------------------------------------
安裝套件

npm install [package] --save
npm install [package] --save-dev

----------------------------------------------
npm start
npm run develop
npm run build

----------------------------------------------



#############################################
###############    yarn 使用    ##############
#############################################

----------------------------------------------
建立初始專案
(產生 package.json 檔)

yarn init -y

----------------------------------------------
安裝套件
(有下面兩種寫法)
(會產生 yarn.lock、node_modules)

yarn
yarn install

----------------------------------------------
安裝套件
yarn add [package]
yarn add [package] --dev

----------------------------------------------
yarn start
yarn run develop
yarn run build

不一定要用上方語法跑 script，也可用 npm，效果相同

----------------------------------------------
yarn 的優點在於會把 node 套件存在一個 global cache
所以不用每次都要從網路上載下一大堆套件
對於套件的相依性也有比較好的管理

----------------------------------------------
npx 為 node.js 的一個內建的 CLI 工具
可以臨時的安裝非全域性的必要套件
省下許多安裝及使用的流程步驟、省下磁碟空間
也避免長期污染，下面為範例：

npx create-react-app my-react
npx express my-express

----------------------------------------------

